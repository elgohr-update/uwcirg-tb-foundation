require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contact_tracing_surveys", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ContactTracingSurvey. As you add validations to ContactTracingSurvey, be sure to
  # adjust the attributes here as well.

  before(:all) do
    create_first_organization
  end

  before do |example|
    unless example.metadata[:skip_login]
      cookie_for_user({ password: "password", phone_number: @patients[0].phone_number, type: "Patient" })
    end
  end

  after(:all) do
    DatabaseCleaner.clean_with(:truncation)
  end

  let(:valid_attributes) {
    #skip("Add a hash of attributes valid for your model")
    {

      number_of_contacts: 1,
      number_of_contacts_tested: 1,
    }
  }

  let(:invalid_attributes) {
    {
      password: "password",
      username: "test",
    }
  }

  let(:contact_tracing_surveys_url) {
    "/v2/patient/#{@patients[0].id}/contact_tracing_surveys"
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ContactTracingSurveysController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) { }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ContactTracingSurvey" do
        expect {
          post contact_tracing_surveys_url,
               params: { contact_tracing_survey: valid_attributes }, headers: valid_headers, as: :json
        }.to change(ContactTracingSurvey, :count).by(1)
      end

      it "renders a JSON response with the new contact_tracing_survey" do
        post contact_tracing_surveys_url,
             params: { contact_tracing_survey: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ContactTracingSurvey" do
        expect {
          post contact_tracing_surveys_url,
               params: { contact_tracing_survey: invalid_attributes }, as: :json
        }.to change(ContactTracingSurvey, :count).by(0)
      end

      it "renders a JSON response with errors for the new contact_tracing_survey" do
        post contact_tracing_surveys_url,
             params: { contact_tracing_survey: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end
end
